import React, { useState } from 'react';
import Header from './components/Header';
import Sidebar from './components/Sidebar';
import MainContent from './components/MainContent';
import InputArea from './components/InputArea';

const ChatInterface = () => {
  const [messages, setMessages] = useState([
    {
      id: 1,
      type: 'assistant',
      content: 'Hello! I\'m your AI assistant. How can I help you today?',
      timestamp: new Date()
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [activeView, setActiveView] = useState('conversations');
  const [drafts, setDrafts] = useState([]);
  const [moveSuccessMessage, setMoveSuccessMessage] = useState('');

  // User information - you can make this dynamic or fetch from API
  const userInfo = {
    name: "John Doe",
    email: "john.doe@example.com"
  };

  const handleNewChat = () => {
    setMessages([
      {
        id: 1,
        type: 'assistant',
        content: 'Hello! I\'m your AI assistant. How can I help you today?',
        timestamp: new Date()
      }
    ]);
    setInputValue('');
    setActiveView('conversations');
    setMoveSuccessMessage('New chat started!');
    setTimeout(() => setMoveSuccessMessage(''), 2000);
  };

  const handleSendMessage = () => {
    if (!inputValue.trim()) return;

    const userMessage = {
      id: messages.length + 1,
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    };

    const assistantMessage = {
      id: messages.length + 2,
      type: 'assistant',
      content: 'This is a simulated response. In a real implementation, this would be generated by your AI backend.',
      timestamp: new Date()
    };

    setMessages([...messages, userMessage, assistantMessage]);
    setInputValue('');
  };

  const handleCopyMessage = (content) => {
    console.log('Message copied:', content);
  };

  const handleMoveToDrafts = (message) => {
    const existingDraft = drafts.find(draft => draft.originalMessageId === message.id);
    if (existingDraft) {
      setMoveSuccessMessage('Message already in drafts!');
      setTimeout(() => setMoveSuccessMessage(''), 3000);
      return;
    }

    const draftItem = {
      id: Date.now(),
      content: message.content,
      timestamp: new Date(),
      originalMessageId: message.id
    };
    
    setDrafts(prevDrafts => [...prevDrafts, draftItem]);
    setMoveSuccessMessage('Message moved to Final Drafts!');
    setTimeout(() => setMoveSuccessMessage(''), 3000);
  };

  const handleDeleteDraft = (draftId) => {
    setDrafts(prevDrafts => prevDrafts.filter(draft => draft.id !== draftId));
  };

  return (
    <div className="flex h-screen w-screen bg-gray-50 overflow-hidden">
      <Sidebar 
        sidebarOpen={sidebarOpen}
        activeView={activeView}
        setActiveView={setActiveView}
        onNewChat={handleNewChat}
        userName={userInfo.name}
        userEmail={userInfo.email}
      />
      
      <div className="flex-1 flex flex-col min-w-0 h-full">
        <Header 
          sidebarOpen={sidebarOpen}
          setSidebarOpen={setSidebarOpen}
        />
        
        {moveSuccessMessage && (
          <div className="mx-4 mt-2 p-3 bg-green-100 border border-green-200 text-green-700 rounded-lg text-sm flex-shrink-0">
            {moveSuccessMessage}
          </div>
        )}
        
        <MainContent 
          activeView={activeView}
          messages={messages}
          drafts={drafts}
          onCopyMessage={handleCopyMessage}
          onMoveToDrafts={handleMoveToDrafts}
          onDeleteDraft={handleDeleteDraft}
        />
        
        {activeView === 'conversations' && (
          <InputArea 
            inputValue={inputValue}
            setInputValue={setInputValue}
            handleSendMessage={handleSendMessage}
          />
        )}
      </div>
    </div>
  );
};

export default ChatInterface;
